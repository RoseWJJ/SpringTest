<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
	">
	<context:component-scan base-package="com.et.lesson04/testm"></context:component-scan>
	<context:property-placeholder
		location="classpath:/com/et/lesson04/jdbc/mysql.properties" />
	<!-- 数据源只是为了获取链接 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="url" value="${url}"></property>
		<property name="username" value="${username1}"></property>
		<property name="password" value="${password}"></property>
		<property name="driverClassName" value="${driverClass}"></property>
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 事务管理器，用于提交和回滚事务， 因为不再使用jdbc的commit和rollback 必须使用事务管理器提供 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 定义数据源 -->
		<property name="dataSource" ref="dataSource"></property>	
	</bean>
	<!-- 定义通知   开启数据库链接 和提交要使用事务管理器那么 通知就是告诉事务管理器，一旦有切点定位到增删改的时候，会自动在前置通知中加个链接， 已经完成          然后将事务管理器和通知关联起来-->
	<tx:advice id="myAdvise" transaction-manager="transactionManager">
		<!-- 通知可以定义 对那些方法拦截进而开启事务 -->
		<!--事务的传播特性
			默认程序刚启动没有事务，
			propagation="REQUIRED"  方法和方法之间父子关系
			REQUIRED  ： 没有事务创建一个事务， 有事务使用当前事务，
			REQUIRES_NEW ： 不管父方法是否存在事务，都会新建一个事务；
			SUPPORTS 父方法存在事务，使用当前事务，没有事务，使用jdbc的事务，（自动提交）
			NOT_SUPPORTED 不管父方法是否存在事务，都不会使用父方法的事务（挂起事务  父方法的事务对其没有影响）
			MANDATORY  必须在事务环境下运行，父方法没有事务抛出异常；
			NEVER 父方法不能存在事务，有事务抛出异常；
		-->
		
		<!--
			 隔离级别  isolation（就是为了解决事务操作同一份数据导致的问题）  	
			 DEFAULT: 使用数据库本身的隔离级别 Oracle （读已提交）    mysql（可重复度）	
			 READ UNCOMMITTED： spring 实现读未提交数据。脏读、不可重复读、幻读都可能发生。它的事务隔离性最低。
			 READ COMMITTED：spring 实现读已提交数据（不可重复读和幻读）【数据库的默认的隔离级别】
			 REPEATABLE READ：可重复读。幻读。
			 SERIALIZABLE：串行化。解决任何并发事务问题。最严格的事务
			Oracle只支持READ COMMITTED和SERIALIZABLE。
        	默认为READ COMMITTED
	 
	    	设置隔离级别
           	alter session set isolation_level=serializable;--如果需要演示 必须每个客户端都要执行
			
			
			spring 事务 运行过程中碰到运行时异常，会自带回滚 非运行是异常不会回滚；
			rollback-for ="" 指定会 自带回滚的非运行时异常；
			no-rollback-for="" 指定某些运行时异常抛出时，不会滚；
		 -->
		<tx:attributes>
			<tx:method name="change*" propagation="REQUIRES_NEW" isolation="DEFAULT" />
			<tx:method name="save*"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(* com.*..*.testm.dao.*.*(..))"
			id="myPoint" />
		<!-- 将通知引入切点 一旦切点定位到增删改的时候 就通知 myAdvice 去调用事务 开启链接和处理提交 -->
		<aop:advisor advice-ref="myAdvise" pointcut-ref="myPoint" />
	</aop:config>
</beans>